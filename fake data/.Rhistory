store.calc[seq1,]=cbind(res4,zeros,jjjj)
jjjj=jjjj+1
oooo=oooo+ndados
}
}
colnames(store.calc)=c(colnames(res4),'selected','mov.id')
head(store.calc)
unique(store.calc[,'mov.id'])
head(store.calc)
cond=!is.na(store.calc[,'mov.id'])
store.calc1=store.calc[cond,]
dim(store.calc)
dim(store.calc1)
setwd('U:\\GIT_models\\git_ssf\\fake data')
write.csv(store.calc1,'cumul_time and covs.csv',row.names=F)
rm(list=ls())
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=fread('cumul_time and covs.csv')
#time model details
time.int=4
gamma.b=2
dat$time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
#get time.prob for selected pixels
cond=dat$selected==1
aux=dat[cond,c('mov.id','time.prob')]
colnames(aux)[2]='time.prob.sel'
dat1=merge(dat,aux,all=T); dim(dat); dim(dat1)
cond=dat1$time.prob>(dat1$time.prob.sel*0.01)
dat2=dat1[cond,]; dim(dat1); dim(dat2); mean(cond)
#export
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat3=as.data.frame(dat2)
ind=which(colnames(dat3)%in%c('x','y','cum.time','time.prob.sel'))
write.csv(dat3[,-ind],'fake_data_trimmed.csv',row.names=F)
rm(list=ls())
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('fake_data_trimmed.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#parameters for gibbs sampler
ngibbs=10000
nburn=ngibbs/2
mod1=ssf_gibbs(dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
plot(mod1$llk,type='l')
seq1=100:length(mod1$llk)
plot(mod1$llk[seq1],type='l')
par(mfrow=c(3,1))
for (i in 1:3) plot(mod1$betas[,i],type='l')
par(mfrow=c(3,1))
for (i in 1:3) plot(mod1$betas[,i],type='l')
par(mfrow=c(3,1),mar=rep(1,4))
for (i in 1:3) plot(mod1$betas[,i],type='l')
par(mfrow=c(3,1),mar=c(1,4,1,1))
for (i in 1:3) plot(mod1$betas[,i],type='l')
apply(mod1$betas,2,mean)
betas=c(-1,1,0) #parameters for resource selection function
par(mfrow=c(3,1),mar=c(1,4,1,1))
for (i in 1:3) {
plot(mod1$betas[,i],type='l')
abline(h=betas[i],col='red')
}
rm(list=ls())
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=fread('cumul_time and covs.csv')
#time model details
time.int=4
gamma.b=2
dat$time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
#get time.prob for selected pixels
cond=dat$selected==1
aux=dat[cond,c('mov.id','time.prob')]
colnames(aux)[2]='time.prob.sel'
#merge and subset
dat1=merge(dat,aux,all=T); dim(dat); dim(dat1)
cond=dat1$time.prob>(dat1$time.prob.sel*0.001)
dat2=dat1[cond,]; dim(dat1); dim(dat2); mean(cond)
#export
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat3=as.data.frame(dat2)
ind=which(colnames(dat3)%in%c('x','y','cum.time','time.prob.sel'))
write.csv(dat3[,-ind],'fake_data_trimmed.csv',row.names=F)
rm(list=ls())
set.seed(10)
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('fake_data_trimmed.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#parameters for gibbs sampler
ngibbs=10000
nburn=ngibbs/2
mod1=ssf_gibbs(dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
rm(list=ls())
set.seed(10)
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('fake_data_trimmed.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#parameters for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
mod1=ssf_gibbs(dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
plot(mod1$llk,type='l')
seq1=100:length(mod1$llk)
plot(mod1$llk[seq1],type='l')
betas.true=betas=c(-1,1,0) #parameters for resource selection function
par(mfrow=c(3,1),mar=c(1,4,1,1))
for (i in 1:3) {
plot(mod1$betas[,i],type='l')
abline(h=betas.true[i],col='red')
}
rm(list=ls())
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=fread('cumul_time and covs.csv')
#time model details
time.int=4
gamma.b=2
dat$time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
#get time.prob for selected pixels
cond=dat$selected==1
aux=dat[cond,c('mov.id','time.prob')]
colnames(aux)[2]='time.prob.sel'
#merge and subset
dat1=merge(dat,aux,all=T); dim(dat); dim(dat1)
dim(dat1)
head(dat1)
table(dat1$mov.id)
dist=outer(1:xdim,1:ydim,'-')
rm(list=ls())
set.seed(1)
setwd('U:\\GIT_models\\git_ssf\\fake data')
source('aux functions.R')
library('akima') #for linear interpolation
#basic settings
ncov=3
xdim=1000
ydim=1000
nloc=xdim*ydim
#create spatially correlated covariates
xmat=array(NA,dim=c(xdim,ydim,ncov))
dist=outer(1:xdim,1:ydim,'-')
head(dist)
dist[1:5,1:5]
rm(list=ls())
set.seed(1)
setwd('U:\\GIT_models\\git_ssf\\fake data')
source('aux functions.R')
library('akima') #for linear interpolation
library('mvtnorm')
ncov=3
xdim=1000
ydim=1000
nloc=xdim*ydim
#create spatially correlated covariates
xmat=array(NA,dim=c(xdim,ydim,ncov))
dist1=abs(outer(1:xdim,1:ydim,'-'))
rho=runif(ncov,min=0,max=1)
i=1
Sigma=exp(rho[i]*dist1)
tmp=rmvnorm(1,mean=0,sigma=Sigma)
tmp=rmvnorm(1,mean=rep(0,xdim),sigma=Sigma)
rho
Sigma[1:5,1:5]
Sigma=exp(-rho[i]*dist1)
tmp=rmvnorm(1,mean=rep(0,xdim),sigma=Sigma)
Sigma[1:5,1:5]
tmp=rmvnorm(1,mean=rep(0,xdim),sigma=Sigma)
tmp1=matrix(tmp1,xdim,ydim)
Sigma=exp(-rho[i]*dist1)
tmp=rmvnorm(1,mean=rep(0,xdim),sigma=Sigma)
tmp1=matrix(tmp,xdim,ydim)
image(tmp1)
dim(Sigma)
dim(tmp)
xdim
dim(Sigma)
xmat=array(NA,dim=c(xdim,ydim,ncov))
coord1=expand.grid(x=1:xdim,y=1:ydim)
head(coord1)
xmat=array(NA,dim=c(xdim,ydim,ncov))
coord.tmp=expand.grid(x=1:xdim,y=1:ydim)
coord.geral=expand.grid(x=1:xdim,y=1:ydim)
coord.center=data.frame(x=sample(1:xdim,size=5),
y=sample(1:ydim,size=5))
coord.center=data.frame(x=sample(1:xdim,size=5),
y=sample(1:ydim,size=5))
res=numeric()
for (j in 1:5){
x2=(coord.geral$x-coord.center$x[i])^2
y2=(coord.geral$y-coord.center$y[i])^2
dist1=sqrt(x2+y2)
res=cbind(res,dist1)
}
head(res)
res1=apply(res,1,min)
coord.geral$cov=exp((-1/(2*10))*res1)
head(coord.geral)
coord.geral$cov=(-1/(2*10))*res1
coord.geral$cov=coord.geral$cov-min(coord.geral$cov)
head(coord.geral)
res1=apply(res,1,min)
cov=(-1/(2*10))*res1
cov1=cov-min(cov) #ensure it is positve
coord.geral$cov=(cov1-mean(cov1))/sd(cov1) #ensure it is standardized
library('ggplot2')
coord.center=data.frame(x=sample(1:xdim,size=5),
y=sample(1:ydim,size=5))
res=numeric()
for (j in 1:5){
x2=(coord.geral$x-coord.center$x[i])^2
y2=(coord.geral$y-coord.center$y[i])^2
dist1=sqrt(x2+y2)
res=cbind(res,dist1)
}
res1=apply(res,1,min)
cov=(-1/(2*10))*res1
cov1=cov-min(cov) #ensure it is positve
coord.geral$cov=(cov1-mean(cov1))/sd(cov1) #ensure it is standardized
res=ggplot() +
geom_tile(data = coord.geral, alpha = 0.8,
aes(x = x, y = y,fill = cov))
res
coord.center
res=ggplot() +
geom_tile(data = coord.geral, alpha = 0.8,
aes(x = x, y = y,fill = cov))+
geom_point(data=coord.center,aes(x=x,y=y))
res
xcoord=matrix(1:xdim,ydim,xdim,byrow=T)
xcoord[1:5,1:5]
xmat=array(NA,dim=c(xdim,ydim,ncov))
xcoord=matrix(1:xdim,ydim,xdim,byrow=T)
ycoord=matrix(1:ydim,ydim,xdim)
dist2=matrix(0,ydim,xdim)
for (j in 1:5){
x2=(xcoord-coord.center$x[i])^2
y2=(ycoord-coord.center$y[i])^2
dist1=sqrt(x2+y2)
cond=dist1<dist2
dist2[cond]=dist1[cond]
}
image(dist2)
image(dist2)
range(dist2)
dist2=matrix(Inf,ydim,xdim)
for (j in 1:5){
x2=(xcoord-coord.center$x[i])^2
y2=(ycoord-coord.center$y[i])^2
dist1=sqrt(x2+y2)
cond=dist1<dist2
dist2[cond]=dist1[cond]
}
image(dist2)
dist2=matrix(Inf,ydim,xdim)
for (j in 1:5){
x2=(xcoord-coord.center$x[j])^2
y2=(ycoord-coord.center$y[j])^2
dist1=sqrt(x2+y2)
cond=dist1<dist2
dist2[cond]=dist1[cond]
}
image(dist2)
cov=(-1/(2*10))*dist2
#ensure it is positive
cov1=cov-min(cov)
#ensure it is standardized
cov2=(cov1-mean(cov1))/sd(cov1)
image(cov2)
i=2
coord.center=data.frame(x=sample(1:xdim,size=5),
y=sample(1:ydim,size=5))
dist2=matrix(Inf,ydim,xdim)
for (j in 1:5){
x2=(xcoord-coord.center$x[j])^2
y2=(ycoord-coord.center$y[j])^2
dist1=sqrt(x2+y2)
cond=dist1<dist2
dist2[cond]=dist1[cond]
}
image(dist2)
cov=(-1/(2*10))*dist2
#ensure it is positive
cov1=cov-min(cov)
#ensure it is standardized
cov2=(cov1-mean(cov1))/sd(cov1)
image(cov2)
rm(list=ls())
set.seed(1)
setwd('U:\\GIT_models\\git_ssf\\fake data')
source('aux functions.R')
library('akima') #for linear interpolation
library('mvtnorm')
library('ggplot2')
#basic settings
ncov=3
xdim=1000
ydim=1000
nloc=xdim*ydim
#create spatially correlated covariates
xmat=array(NA,dim=c(xdim,ydim,ncov))
xcoord=matrix(1:xdim,ydim,xdim,byrow=T)
ycoord=matrix(1:ydim,ydim,xdim)
ncenters=10
for (i in 1:ncov){
coord.center=data.frame(x=sample(1:xdim,size=ncenters),
y=sample(1:ydim,size=ncenters))
dist2=matrix(Inf,ydim,xdim)
for (j in 1:ncenters){
x2=(xcoord-coord.center$x[j])^2
y2=(ycoord-coord.center$y[j])^2
dist1=sqrt(x2+y2)
cond=dist1<dist2
dist2[cond]=dist1[cond]
}
# image(dist2)
cov=(-1/(2*10))*dist2
#ensure it is positive
cov1=cov-min(cov)
#ensure it is standardized
cov2=(cov1-mean(cov1))/sd(cov1)
# image(cov2)
xmat[,,i]=cov2
}
ind.loc=matrix(1:nloc,xdim,ydim)
ind.loc=matrix(1:nloc,xdim,ydim)
#parameters
alpha=c(1,-1,0,0) #parameters for time model
gamma.b=2 #this comes from time model
betas.true=betas=c(-1,1,0) #parameters for resource selection function
#calculate mean time and preference
mean.time=mean.pref=matrix(NA,xdim,ydim)
for (i in 1:xdim){
for (j in 1:ydim){
mean.time[i,j]=exp(c(1,xmat[i,j,])%*%alpha)
mean.pref[i,j]=exp(xmat[i,j,]%*%betas)
}
}
#simulate movement
current.pos=ind.loc[500,500]
time.int=4
nsim=1000
coord=matrix(NA,nsim,2)
coord[1,]=c(500,500)
colnames(coord)=c('x','y')
window1=20
for (i in 1:(nsim-1)){
print(i)
#calculate cumulative time across 8 directions
res=get.cumtime.8dir(coord1=coord[i,],mean.time=mean.time,window1=window1)
#calculate prob of staying in the sample place
tmp=matrix(coord[i,c('y','x')],1,2)
tempo.not.move=mean.time[tmp]
res1=rbind(res,c(tempo.not.move,coord[i,c('x','y')]))
#interpolate cumulative time across a window1 x window1 area
minx=coord[i,'x']-window1; maxx=coord[i,'x']+window1
miny=coord[i,'y']-window1; maxy=coord[i,'y']+window1
res2 = interp(x=res1[,'x'],y=res1[,'y'],z=res1[,'cum.time'],
xo = minx:maxx, yo = miny:maxy,
linear=T, extrap = F)
# image(res2)
res3=interp2xyz(res2)
colnames(res3)[3]='cum.time'
#get preference
tmp=cbind(res3[,'y'],res3[,'x'])
pref=mean.pref[tmp]
res4=cbind(res3,pref)
#calculate probabilities
# tempo.rel=res4[,'cum.time']/max(res4[,'cum.time'])
# plot(res4[,'x'],res4[,'y'],col=grey(tempo.rel))
prob=dgamma(time.int,gamma.b*res4[,'cum.time'],gamma.b)*res4[,'pref']
soma=sum(prob)
prob=prob/soma
#plot(prob,type='h')
# prob1=prob-min(prob)
# prob1=prob1/max(prob1)
#plot(res4[,'x'],res4[,'y'],col=grey(1-prob1))
#decide where to move
tmp=rmultinom(1,size=1,prob=prob)
ind=which(tmp==1)
res5=res4[ind,]
coord[i+1,c('x','y')]=res5[c('x','y')]
}
plot(coord[,'x'],coord[,'y'],type='l')
#assume we have some different time intervals
n=nrow(coord)
time.int=runif(n,min=6,max=8)
#insert some bad values
ind=sample(n,size=20)
time.int[ind]=40
#save results
setwd('U:\\GIT_models\\git_ssf\\fake data')
write.csv(cbind(coord,time.int),'fake data coord.csv',row.names=F)
xmat1=matrix(xmat,1,xdim*ydim*ncov)
write.csv(xmat1,'fake data xmat.csv',row.names=F)
rm(list=ls())
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=fread('cumul_time and covs.csv')
#time model details
time.int=4
gamma.b=2
dat$time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
#get time.prob for selected pixels
cond=dat$selected==1
aux=dat[cond,c('mov.id','time.prob')]
colnames(aux)[2]='time.prob.sel'
#merge and subset
dat1=merge(dat,aux,all=T); dim(dat); dim(dat1)
cond=dat1$time.prob>(dat1$time.prob.sel*0.001)
dat2=dat1[cond,]; dim(dat1); dim(dat2); mean(cond)
#export
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat3=as.data.frame(dat2)
ind=which(colnames(dat3)%in%c('x','y','cum.time','time.prob.sel'))
write.csv(dat3[,-ind],'fake_data_trimmed.csv',row.names=F)
rm(list=ls())
set.seed(10)
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('fake_data_trimmed.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#parameters for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
mod1=ssf_gibbs(dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
plot(mod1$llk,type='l')
seq1=100:length(mod1$llk)
plot(mod1$llk[seq1],type='l')
betas.true=betas=c(-1,1,0) #parameters for resource selection function
par(mfrow=c(3,1),mar=c(1,4,1,1))
for (i in 1:3) {
plot(mod1$betas[,i],type='l')
abline(h=betas.true[i],col='red')
}
rm(list=ls())
library('data.table')
#get covariates
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=fread('cumul_time and covs.csv')
#time model details
time.int=4
gamma.b=2
dat$time.prob=dgamma(time.int,gamma.b*dat$cum.time,gamma.b)
#get time.prob for selected pixels
cond=dat$selected==1
aux=dat[cond,c('mov.id','time.prob')]
colnames(aux)[2]='time.prob.sel'
#merge and subset
dat1=merge(dat,aux,all=T); dim(dat); dim(dat1)
cond=dat1$time.prob>(dat1$time.prob.sel*0.001)
dat2=dat1#[cond,]; dim(dat1); dim(dat2); mean(cond)
#export
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat3=as.data.frame(dat2)
ind=which(colnames(dat3)%in%c('x','y','cum.time','time.prob.sel'))
write.csv(dat3[,-ind],'fake_data_trimmed.csv',row.names=F)
dim(dat3)
rm(list=ls())
set.seed(10)
library('data.table')
library('Rcpp')
setwd('U:\\GIT_models\\git_ssf')
sourceCpp('aux1.cpp')
source('ssf gibbs main function.R')
source('ssf gibbs functions.R')
setwd('U:\\GIT_models\\git_ssf\\fake data')
dat=as.data.frame(fread('fake_data_trimmed.csv'))
nomes=paste0('cov',1:3)
xmat=data.matrix(dat[,nomes])
#parameters for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
mod1=ssf_gibbs(dat=dat,ngibbs=ngibbs,nburn=nburn,xmat=xmat)
plot(mod1$llk,type='l')
seq1=100:length(mod1$llk)
plot(mod1$llk[seq1],type='l')
betas.true=betas=c(-1,1,0) #parameters for resource selection function
par(mfrow=c(3,1),mar=c(1,4,1,1))
for (i in 1:3) {
plot(mod1$betas[,i],type='l')
abline(h=betas.true[i],col='red')
}
